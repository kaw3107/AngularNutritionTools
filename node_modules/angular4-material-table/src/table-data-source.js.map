{"version":3,"file":"table-data-source.js","sourceRoot":"","sources":["../../src/table-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataSource } from '@angular/cdk/collections';\n\nimport { BehaviorSubject, Subject, Observable } from 'rxjs';\n\nimport { TableElement } from './table-element';\nimport { ValidatorService } from './validator.service';\nimport { DefaultValidatorService } from './default-validator.service';\n\nexport class TableDataSource<T> extends DataSource<TableElement<T>> {\n\n  protected rowsSubject: BehaviorSubject<TableElement<T>[]>;\n  datasourceSubject: Subject<T[]>;\n\n  protected dataConstructor: new () => T;\n  protected dataKeys: any[];\n\n  protected currentData: any;\n\n  /**\n   * Creates a new TableDataSource instance, that can be used as datasource of `@angular/cdk` data-table.\n   * @param data Array containing the initial values for the TableDataSource. If not specified, then `dataType` must be specified.\n   * @param dataType Type of data contained by the Table. If not specified, then `data` with at least one element must be specified.\n   * @param validatorService Service that create instances of the FormGroup used to validate row fields.\n   * @param config Additional configuration for table.\n   */\n  constructor(\n    data: T[],\n    dataType?: new () => T,\n    private validatorService?: ValidatorService,\n    private config = { prependNewElements: false })\n  {\n    super();\n\n    if (!validatorService)\n      this.validatorService = new DefaultValidatorService();\n\n    if (dataType) {\n      this.dataConstructor = dataType;\n    } else {\n      if (data && data.length > 0)\n        this.dataKeys = Object.keys(data[0]);\n      else\n        throw new Error('You must define either a non empty array, or an associated class to build the table.');\n    }\n\n    this.rowsSubject = new BehaviorSubject(this.getRowsFromData(data));\n    this.datasourceSubject = new Subject<T[]>();\n  }\n\n  /**\n   * Start the creation of a new element, pushing an empty-data row in the table.\n   */\n  createNew(): void {\n    const source = this.rowsSubject.getValue();\n\n    if (!this.existsNewElement(source)) {\n\n      const newElement = new TableElement({\n        id: -1,\n        editing: true,\n        currentData: this.createNewObject(),\n        source: this,\n        validator: this.validatorService.getRowValidator(),\n      });\n\n      if (this.config.prependNewElements) {\n        this.rowsSubject.next([newElement].concat(source));\n      } else {\n        source.push(newElement);\n        this.rowsSubject.next(source);\n      }\n    }\n  }\n\n  /**\n   * Confirm creation of the row. Save changes and disable editing.\n   * If validation active and row data is invalid, it doesn't confirm creation neither disable editing.\n   * @param row Row to be confirmed.\n   */\n  confirmCreate(row: TableElement<T>): boolean {\n    if (!row.validator.valid) {\n      return false\n    }\n\n    const source = this.rowsSubject.getValue();\n    row.id = source.length - 1;\n    this.rowsSubject.next(source);\n\n    row.editing = false;\n    row.validator.disable();\n\n    this.updateDatasourceFromRows(source);\n    return true;\n  }\n\n  /**\n   * Confirm edition of the row. Save changes and disable editing.\n   * If validation active and row data is invalid, it doesn't confirm editing neither disable editing.\n   * @param row Row to be edited.\n   */\n  confirmEdit(row: TableElement<T>): boolean {\n    if (!row.validator.valid) {\n      return false;\n    }\n\n    const source = this.rowsSubject.getValue();\n    const index = this.getIndexFromRowId(row.id, source);\n\n    source[index] = row;\n    this.rowsSubject.next(source);\n\n    row.originalData = undefined;\n    row.editing = false;\n    row.validator.disable();\n\n    this.updateDatasourceFromRows(source);\n    return true;\n  }\n\n  /**\n   * Delete the row with the index specified.\n   */\n  delete(id: number): void {\n    const source = this.rowsSubject.getValue();\n    const index = this.getIndexFromRowId(id, source);\n\n    source.splice(index, 1);\n    this.updateRowIds(index, source);\n\n    this.rowsSubject.next(source);\n\n    if (id != -1)\n      this.updateDatasourceFromRows(source);\n  }\n\n  /**\n * Get row from the table.\n * @param id Id of the row to retrieve, -1 returns the current new line.\n */\n  getRow(id: number): TableElement<T> {\n    const source = this.rowsSubject.getValue();\n    const index = this.getIndexFromRowId(id, source);\n\n    return (index >= 0 && index < source.length) ? source[index] : null;\n  }\n\n  /**\n   * Update the datasource with a new array of data. If the array reference\n   * is the same as the previous one, it doesn't trigger an update.\n   * @param data Data to update the table datasource.\n   * @param options Specify options to update the datasource.\n   * If emitEvent is true and the datasource is updated, it emits an event\n   * from 'datasourceSubject' with the updated data. If false, it doesn't\n   * emit an event. True by default.\n   */\n  updateDatasource(data: T[], options = { emitEvent: true }): void {\n    if (this.currentData !== data) {\n      this.currentData = data;\n      this.rowsSubject.next(this.getRowsFromData(data))\n\n      if (options.emitEvent)\n        this.datasourceSubject.next(data);\n    }\n  }\n\n\n  /**\n   * Checks the existance of the a new row (not yet saved).\n   * @param source\n   */\n  protected existsNewElement(source: TableElement<T>[]): boolean {\n      return !(source.length == 0 || source[this.getNewRowIndex(source)].id > -1)\n  }\n\n  /**\n   * Returns the possible index of the new row depending on the insertion type.\n   * It doesn't imply that the new row is created, that must be checked.\n   * @param source\n   */\n  protected getNewRowIndex(source): number {\n    if (this.config.prependNewElements)\n      return 0;\n    else\n      return source.length - 1;\n  }\n\n  /**\n   * Returns the row id from the index specified. It does\n   * not consider if the new row is present or not, assumes\n   * that new row is not present.\n   * @param index Index of the array.\n   * @param count Quantity of elements in the array.\n   */\n  protected getRowIdFromIndex(index: number, count: number): number {\n    if (this.config.prependNewElements)\n      return count - 1 - index;\n    else\n      return index;\n  }\n\n  /**\n   * Returns the index from the row id specified.\n   * It takes into account if the new row exists or not.\n   * @param id\n   * @param source\n   */\n  protected getIndexFromRowId(id: number, source: TableElement<T>[]): number {\n    if(id == -1) {\n      return this.existsNewElement(source) ? this.getNewRowIndex(source) : -1;\n    } else {\n      if (this.config.prependNewElements)\n          return source.length - 1 - id;\n      else\n        return id;\n    }\n  }\n\n  /**\n   * Update rows ids in the array specified, starting in the specified index\n   * until the start/end of the array, depending on config.prependNewElements\n   * configuration.\n   * @param initialIndex Initial index of source to be updated.\n   * @param source Array that contains the rows to be updated.\n   */\n  protected updateRowIds(initialIndex: number, source: TableElement<T>[]): void {\n\n    const delta = this.config.prependNewElements ? -1 : 1;\n\n    for (let index = initialIndex; index < source.length && index >= 0; index += delta) {\n      if (source[index].id != -1)\n        source[index].id = this.getRowIdFromIndex(index, source.length);\n    }\n  }\n\n  /**\n   * Get the data from the rows.\n   * @param rows Rows to extract the data.\n   */\n  protected getDataFromRows(rows: TableElement<T>[]): T[] {\n    return rows\n      .filter(row => row.id != -1)\n      .map<T>((row) => {\n      return row.originalData ? row.originalData : row.currentData;\n    });\n  }\n\n  /**\n   * Update the datasource with the data contained in the specified rows.\n   * @param rows Rows that contains the datasource's new data.\n   */\n  protected updateDatasourceFromRows(rows: TableElement<T>[]): void {\n    this.currentData = this.getDataFromRows(rows);\n    this.datasourceSubject.next(this.currentData);\n  }\n\n  /**\n   * From an array of data, it returns rows containing the original data.\n   * @param arrayData Data from which create the rows.\n   */\n  protected getRowsFromData(arrayData: T[]): TableElement<T>[] {\n    return arrayData.map<TableElement<T>>((data, index) => {\n\n      const validator = this.validatorService.getRowValidator();\n      validator.disable();\n\n      return new TableElement({\n        id: this.getRowIdFromIndex(index, arrayData.length),\n        editing: false,\n        currentData: data,\n        source: this,\n        validator: validator,\n      })\n    });\n  }\n\n  /**\n   * Create a new object with identical structure than the table source data.\n   * It uses the object's type contructor if available, otherwise it creates\n   * an object with the same keys of the first element contained in the original\n   * datasource (used in the constructor).\n   */\n  protected createNewObject(): T {\n    if (this.dataConstructor)\n      return new this.dataConstructor();\n    else {\n      return this.dataKeys.reduce((obj, key) => {\n        obj[key] = undefined;\n        return obj;\n      }, {});\n    }\n\n  }\n\n  /** Connect function called by the table to retrieve one stream containing\n   *  the data to render. */\n  connect(): Observable<TableElement<T>[]> {\n    return this.rowsSubject.asObservable();\n  }\n\n  disconnect() { }\n}\n"]}